// tests/userRoutes.test.js
const request = require('supertest');
const express = require('express');
const router = require('../routes/userRoutes');
const User = require('../models/userModel');
const userController = require('../controllers/userController');
const authenticateJWT = require('../middlewares/authMiddleware');

jest.mock('../controllers/userController');
jest.mock('../middlewares/authMiddleware');

const app = express();
app.use(express.json());
app.use('/api/users', router);

describe('User Routes', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  describe('POST /register', () => {
    it('should register a user with valid data', async () => {
      userController.register.mockResolvedValueOnce();
      
      const res = await request(app)
        .post('/users/register')
        .send({ username: 'testuser', password: 'password123','userrole': 'testrole','deptId':'66f0bcb3030a85745aff5fc8' });
      
      expect(res.statusCode).toBe(200);
      expect(userController.register).toHaveBeenCalled();
    });

    it('should return 400 if username is missing', async () => {
      const res = await request(app)
        .post('/users/register')
        .send({ password: 'password123' });
      
      expect(res.statusCode).toBe(400);
      expect(res.body.error).toBe('Username is required');
    });
  });

  describe('POST /login', () => {
    it('should login a user with valid data', async () => {
      userController.login.mockResolvedValueOnce();
      
      const res = await request(app)
        .post('/users/login')
        .send({ username: 'testuser', password: 'password123' });
      
      expect(res.statusCode).toBe(200);
      expect(userController.login).toHaveBeenCalled();
    });

    it('should return 400 if username is missing', async () => {
      const res = await request(app)
        .post('/users/login')
        .send({ password: 'password123' });
      
      expect(res.statusCode).toBe(400);
      expect(res.body.error).toBe('Username is required');
    });

    it('should return 429 if rate limit is exceeded', async () => {
      for (let i = 0; i < 5; i++) {
        await request(app)
          .post('/users/login')
          .send({ username: 'testuser', password: 'password123' });
      }

      const res = await request(app)
        .post('/users/login')
        .send({ username: 'testuser', password: 'password123' });

      expect(res.statusCode).toBe(429);
      expect(res.body.message).toBe('Too many login attempts from this IP, please try again later.');
    });
  });

  describe('GET /', () => {
    it('should get all users (protected route)', async () => {
      authenticateJWT.mockImplementation((req, res, next) => next());
      userController.getAllUsers.mockResolvedValueOnce();

      const res = await request(app).get('/users/');
      
      expect(res.statusCode).toBe(200);
      expect(userController.getAllUsers).toHaveBeenCalled();
    });

    it('should return 401 if JWT is not provided', async () => {
      authenticateJWT.mockImplementation((req, res) => res.status(401).json({ error: 'Unauthorized' }));

      const res = await request(app).get('/users/');
      
      expect(res.statusCode).toBe(401);
      expect(res.body.error).toBe('Unauthorized');
    });
  });

  describe('GET /:id', () => {
    it('should get a user by ID (protected route)', async () => {
      authenticateJWT.mockImplementation((req, res, next) => next());
      userController.getUserById.mockResolvedValueOnce();

      const res = await request(app).get('/users/123');
      
      expect(res.statusCode).toBe(200);
      expect(userController.getUserById).toHaveBeenCalled();
    });
  });

  describe('PUT /:id', () => {
    it('should update a user by ID (protected route)', async () => {
      authenticateJWT.mockImplementation((req, res, next) => next());
      userController.updateUser.mockResolvedValueOnce();

      const res = await request(app)
        .put('/users/123')
        .send({ username: 'updateduser' });
      
      expect(res.statusCode).toBe(200);
      expect(userController.updateUser).toHaveBeenCalled();
    });

    it('should return 400 if password is too short', async () => {
      authenticateJWT.mockImplementation((req, res, next) => next());

      const res = await request(app)
        .put('/users/123')
        .send({ password: 'short' });
      
      expect(res.statusCode).toBe(400);
      expect(res.body.error).toBe('Password must be at least 6 characters long');
    });
  });

  describe('DELETE /:id', () => {
    it('should delete a user by ID (protected route)', async () => {
      authenticateJWT.mockImplementation((req, res, next) => next());
      userController.deleteUser.mockResolvedValueOnce();

      const res = await request(app).delete('/users/123');
      
      expect(res.statusCode).toBe(200);
      expect(userController.deleteUser).toHaveBeenCalled();
    });
  });
});
